from flask import Flask, request, jsonify
import csv

app = Flask(__name__)


class AVLNode:
    def __init__(self, key, data):
        self.key = key
        self.data = data
        self.left = None
        self.right = None
        self.height = 1


class AVLTree:
    def __init__(self):
        self.root = None

    def insert(self, key, data):
        if not self.root:
            self.root = AVLNode(key, data)
        else:
            self.root = self._insert(self.root, key, data)

    def _insert(self, node, key, data):
        if not node:
            return AVLNode(key, data)
        elif key < node.key:
            node.left = self._insert(node.left, key, data)
        else:
            node.right = self._insert(node.right, key, data)

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))

        balance = self._get_balance(node)

        if balance > 1 and key < node.left.key:
            return self._rotate_right(node)
        if balance < -1 and key > node.right.key:
            return self._rotate_left(node)
        if balance > 1 and key > node.left.key:
            node.left = self._rotate_left(node.left)
            return self._rotate_right(node)
        if balance < -1 and key < node.right.key:
            node.right = self._rotate_right(node.right)
            return self._rotate_left(node)

        return node

    def _get_height(self, node):
        if not node:
            return 0
        return node.height

    def _get_balance(self, node):
        if not node:
            return 0
        return self._get_height(node.left) - self._get_height(node.right)

    def _rotate_right(self, z):
        y = z.left
        T3 = y.right

        y.right = z
        z.left = T3

        z.height = 1 + max(self._get_height(z.left), self._get_height(z.right))
        y.height = 1 + max(self._get_height(y.left), self._get_height(y.right))

        return y

    def _rotate_left(self, z):
        y = z.right
        T2 = y.left

        y.left = z
        z.right = T2

        z.height = 1 + max(self._get_height(z.left), self._get_height(z.right))
        y.height = 1 + max(self._get_height(y.left), self._get_height(y.right))

        return y


avl_tree = AVLTree()


@app.route('/cargar_registros', methods=['POST'])
def cargar_registros():
    if 'file' not in request.files:
        return jsonify({'error': 'No se ha proporcionado ningún archivo'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No se ha seleccionado ningún archivo'}), 400

    if file:
        csv_data = csv.reader(file)
        for row in csv_data:
            # Suponiendo que el archivo CSV tiene el formato: key,data
            key, data = row
            avl_tree.insert(int(key), data)

        return jsonify({'message': 'Registros cargados exitosamente'}), 200

@app.route('/insertar_registro', methods=['POST'])
def insertar_registro():
    key = request.json.get('key')
    data = request.json.get('data')

    if key is None or data is None:
        return jsonify({'error': 'Se requiere una clave y datos para insertar el registro'}), 400

    avl_tree.insert(int(key), data)
    return jsonify({'message': 'Registro insertado exitosamente'}), 200


@app.route('/buscar_registro/<int:key>', methods=['GET'])
def buscar_registro(key):
    # Implementa la lógica de búsqueda en el árbol AVL
    return jsonify({'message': 'Implementa la lógica de búsqueda'}), 200


@app.route('/informacion_grupo', methods=['GET'])
def informacion_grupo():
    # Retorna la información del grupo
    return jsonify({
        'integrantes': [
            {'nombre': 'Nombre1', 'carnet': 'Carnet1', 'contribuciones': 'Contribuciones1'},
            {'nombre': 'Nombre2', 'carnet': 'Carnet2', 'contribuciones': 'Contribuciones2'}
            # Agrega más integrantes según sea necesario
        ]
    }), 200

if __name__ == '__main__':
    app.run(debug=True)
